<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:batch="http://www.springframework.org/schema/batch" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/batch
                    http://www.springframework.org/schema/batch/spring-batch-2.1.xsd
                    http://www.springframework.org/schema/task
                    http://www.springframework.org/schema/task/spring-task-3.1.xsd
                    http://www.springframework.org/schema/integration
                    http://www.springframework.org/schema/integration/spring-integration.xsd
                    http://www.springframework.org/schema/integration/jms
                    http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd
                    ">

	<beans profile="master">
		<batch:job id="SpringBatchpartitionerExperiment">
			<batch:step id="readWriteProducts">
				<batch:partition partitioner="partitioner" handler="partitionHandler" />
			</batch:step>
		</batch:job>
		<bean name="partitioner"
			class="org.punnoose.springbatchdemo.partition.PeoplePartitioner">
			<property name="personDao" ref="personDao"></property>
		</bean>
		<bean id="partitionHandler"
			class="org.springframework.batch.integration.partition.MessageChannelPartitionHandler">
			<property name="stepName" value="partitionReadWriteProducts" />
			<property name="gridSize" value="3" />
			<property name="messagingOperations">
				<bean class="org.springframework.integration.core.MessagingTemplate">
					<property name="defaultChannel" ref="outboundRequests" />
					<property name="receiveTimeout" value="60000" />
				</bean>
			</property>
		</bean>
		<task:executor id="taskExecutor" pool-size="20" />
		<int:channel id="outboundRequests">
			<int:dispatcher task-executor="taskExecutor" />
		</int:channel>
		<int-jms:outbound-gateway request-channel="outboundRequests"
			reply-channel="inboundStaging" request-destination-name="output.queue"
			connection-factory="connectionFactory" />
		<bean name="personDao" class="org.punnoose.springbatchdemo.dao.PersonDaoImpl" />

		<int:channel id="inboundStaging" />
		<int:aggregator ref="partitionHandler"
			send-partial-result-on-expiry="true" send-timeout="60000000"
			input-channel="inboundStaging" />

	</beans>

	<beans profile="slave">

		<int-jms:inbound-gateway request-channel="inboundRequests" concurrent-consumers="3" 
			request-destination-name="output.queue" connection-factory="connectionFactory" />

		<int:channel id="inboundRequests" />

		<int:service-activator ref="stepExecutionRequestHandler"
			input-channel="inboundRequests"></int:service-activator>

		<bean id="stepExecutionRequestHandler"
			class="org.springframework.batch.integration.partition.StepExecutionRequestHandler">
			<property name="jobExplorer" ref="jobExplorer" />
			<property name="stepLocator" ref="stepLocator" />
		</bean>

		<bean id="stepLocator"
			class="org.springframework.batch.integration.partition.BeanFactoryStepLocator" />

		<batch:step id="partitionReadWriteProducts">
			<batch:tasklet>
				<batch:chunk reader="reader" writer="writer" processor="processor"
					commit-interval="3" />
			</batch:tasklet>
		</batch:step>

		<bean name="processor"
			class="org.punnoose.springbatchdemo.processor.PersonProcessor" />

		<bean name="reader"
			class="org.punnoose.springbatchdemo.reader.PersonReader"
			scope="step">
			<property name="people"
				value="#{stepExecutionContext[PersonList]}" />
		</bean>
		
		<bean name="writer"
			class="org.punnoose.springbatchdemo.writer.PersonSysOutWriter" />
	</beans>
</beans>